import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { ModalController, Platform, LoadingController } from '@ionic/angular';
import { AlertController } from '@ionic/angular';
import { CacheService } from '../../services/cache/cache.service';
import { Router } from '@angular/router';
import { AdvisoryVerificationComponent } from '../../components/advisory-verification/advisory-verification.component';
import { NetworkService } from '../../services/network/network.service';
import { Storage } from '@ionic/storage';
import { ToastController } from '@ionic/angular';
import { AdvisoryTopicService } from '../../services/activities/advisoryTopic/advisory-topic.service';
import { uploadFile } from '../../intarfaces/interfaces';
import { Plugins, FilesystemDirectory } from '@capacitor/core';
import { PhotoServiceService } from '../../services/attach/photo-service.service';
import { ActivityListCompanyService } from '../../services/activities/activityListCompany/activity-list-company.service';
const { Filesystem } = Plugins;


@Component({
  selector: 'app-survey-and-signature',
  templateUrl: './survey-and-signature.page.html',
  styleUrls: ['./survey-and-signature.page.scss'],
})
export class SurveyAndSignaturePage implements OnInit {

  data: any[] = [];
  selectedVal: any;
  showSignature = false;
  verificationCode: number;


  responsibleList: any[] = [];


  textCheckFirma: any = 'NO';
  disabledFirma = false;

  infoSurveyQR: any;

  disabledBtnSignature = false;

  valueNetwork: any;

  actasAsesoria = [];


  infoUserARL: any;

  actaAsesoriaGestionada: any;

  cargaArchivos: any;

  loading: any;

  filesBase64: any[] = [];

  filesConcat: any = '';



  constructor(private platform: Platform,
              private cacheService: CacheService,
              private router: Router,
              private storage: Storage,
              private net: NetworkService,
              private photoService: PhotoServiceService,
              private loadingCtlr: LoadingController,
              private advisoryTopicService: AdvisoryTopicService,
              private activityListCompany: ActivityListCompanyService,
              private toastController: ToastController,
              private modalCtrl: ModalController,
              private alertController: AlertController) { }


  async ionViewWillEnter() {
    const leerArchivos = await this.readFile();
  }

  ngOnInit() {
    this.responsibleList = JSON.parse(sessionStorage.companySelected).listaReposables;
    this.data = this.responsibleList;
    this.getInfoUser();
  }

  async getInfoUser() {
    this.infoUserARL = await this.storage.get('sesion');
  }

  async confirmVerificationCode() {
    let data2: any;
    let verification: any;
    const handlerVerification = (data) => {
      data2 = data;
    };

    const handlerVerificationCode = () => {
      verification = true;
    };

    const alert = await this.alertController.create({
      cssClass: 'my-custom-class',
      backdropDismiss: false,
      mode: 'ios',
      // tslint:disable-next-line: max-line-length
      header: `Ingrese el código de verificación, si seleccionas la opción reenviar código, se enviará al siguiente correo: ${this.selectedVal.correo}`,
      inputs: [
        {
          name: 'verificationCodeInput',
          type: 'tel',
          placeholder: 'Código de verificación'
        }
      ],
      buttons: [
        {
          text: 'Reenviar código',
          handler: handlerVerificationCode
        },
        {
          text: 'Aceptar',
          handler: handlerVerification
        }
        , {
          text: 'Cancelar',
          role: 'cancel',
          cssClass: 'secondary',
          handler: () => {
            console.log('Confirm Cancel');
          }
        }
      ]
    });

    alert.onDidDismiss().then(async () => {

      if (data2) {
        if (this.selectedVal) {
          this.disabledFirma = true;
          if (this.selectedVal.codigoVerificacion === data2.verificationCodeInput) {
            this.verificationCode = data2.verificationCodeInput;
            this.disabledBtnSignature = true;
            console.log('Es el mismo código de verificación');
          } else {
            this.notification('Atención', 'El código ingresado no es valido, por favor intente nuevamente');
            this.disabledFirma = false;
          }
        } else {
          this.notification('Alerta', 'Debes seleccionar a un responsable de la empresa.');
        }
      } else {
        if (verification) {
          if (this.selectedVal) {
            const checkNetwork = await this.validateNetwork();
            if (checkNetwork) {
              const idEmpresa = JSON.parse(sessionStorage.companySelected).id;
              const idResponsable = this.selectedVal.id;
              this.presentLoading('Reenviando código de verificación ...');
              const siEnvioCorreo = await this.activityListCompany.recordarCodigoVerificacion(idResponsable, idEmpresa).toPromise();
              if (siEnvioCorreo) {
                this.notification('Exitoso', `Se reenvio el código de verificación al correo ${this.selectedVal.correo}`);
                this.loading.dismiss();
              } else {
                this.notification('Error', `No se pudo envíar el código de verificación al correo: ${this.selectedVal.correo}`);
                this.loading.dismiss();
              }
            } else {
              this.notification('Alerta', 'No tienes conexión a internet para realizar esta funcionalidad');
            }
          } else {
            this.notification('Alerta', 'Debes seleccionar a un responsable de la empresa.');
          }
        }
      }


    });

    await alert.present();
  }

  OnChange(event) {
    this.selectedVal = event.detail.value;
    // this.confirmVerificationCode();
  }

  getInfoSignatureQR(infoQR) {
    const fechaCreaciónActa = new Date();

    if (this.textCheckFirma === 'NO') {
      this.textCheckFirma = false;
      const answerPoll = infoQR.answerPoll.charAt(0);
      this.infoSurveyQR = {
        nombreResponsable: this.selectedVal.Nombre,
        responsableId: this.selectedVal.id,
        tipoDocumentoResponsable: this.selectedVal.tipoDocumentoDescripcion,
        numeroDocumentoResponsable: this.selectedVal.numeroDocumento,
        cargo: this.selectedVal.cargo,
        firmaQR: this.textCheckFirma,
        answerPool: answerPoll,
        signature: infoQR.signatureEntered,
        dateCreatedSurvey: fechaCreaciónActa
      };
      this.cacheService.saveSurveyQR(this.infoSurveyQR);
      this.router.navigateByUrl('/u/execLog/pending-visits/visit-id/company-info/comments/survey-signature/responsibleSignatureARL');
    } else {
      this.textCheckFirma = true;
      this.infoSurveyQR = {
        nombreResponsable: this.selectedVal.Nombre,
        responsableId: this.selectedVal.id,
        tipoDocumentoResponsable: this.selectedVal.tipoDocumentoDescripcion,
        numeroDocumentoResponsable: this.selectedVal.numeroDocumento,
        cargo: this.selectedVal.cargo,
        firmaQR: this.textCheckFirma,

        nombreResponsableARL: infoQR.nombreResponsableARL,
        apellidoResponsableARL: infoQR.apellidosResponsableARL,
        documentoResponsableARL: infoQR.documentoUsuarioARL,
        nombreProveedor: infoQR.nombreProveedor,
        cargoARL: infoQR.cargo,
        licenciaSSTARL: infoQR.licenciaSST,
        signature: infoQR.signatureEntered,
        dateCreatedSurvey: fechaCreaciónActa
      };
      this.cacheService.saveSurveyQR(this.infoSurveyQR);
      this.sendTask();
    }
  }


  changeOptSignature(event) {
    if (event.detail.checked === true) {
      this.showSignature = true;
      this.textCheckFirma = 'SI';
    } else {
      this.showSignature = false;
      this.textCheckFirma = 'NO';
    }
  }

  async verification() {
    // this.router.navigateByUrl('/u/execLog/pending-visits/visit-id/company-info/comments/survey-signature/advisoryVerification');
    const infoActa = this.cacheService.getAllInfoToAdvisory();
    const modal = await this.modalCtrl.create({
      component: AdvisoryVerificationComponent,
      componentProps: {
        info: infoActa
      }
    });

    modal.present();

  }

  async sendTask() {
    // tslint:disable-next-line: no-debugger
    debugger;
    console.log('Enviar tarea ...');
    const checkNetwork = await this.validateNetwork();
    const idProveedor = this.infoUserARL.idProveedor;
    this.actaAsesoriaGestionada = this.cacheService.createActaAsesoria(idProveedor);
    if (checkNetwork) {
      console.log('Si hay conexion y se debe enviar a la web');
      // this.router.navigateByUrl('/u/execLog');
      this.presentLoading('Creando acta de asesoría ...');
      let creacionActa = await this.advisoryTopicService.saveActaAsesoria(this.actaAsesoriaGestionada).toPromise();
      // console.log('Creacion del acta', creacionActa);
      creacionActa = creacionActa.split(';');
      if (creacionActa[0] === 'true' && creacionActa[1] !== '-1') {

        // tslint:disable-next-line: no-debugger
        debugger;
        const imagenesAdjuntas = this.cacheService.obtenerAdjuntosFoto();
        
        if (this.filesBase64 || this.photoService.photos) {
          if (this.filesBase64) {
            // tslint:disable-next-line: prefer-for-of
            for (let i = 0; i < this.filesBase64.length; i++) {
              // tslint:disable-next-line: radix
              this.filesBase64[i].UidActaAsesoria = parseInt(creacionActa[1]);
              const objAdjuntarDoc = this.filesBase64[i];
              this.cargaArchivos = await this.advisoryTopicService.uploadFileActaAsesoria(objAdjuntarDoc).toPromise();
              console.log('Se cargo el docuento', this.cargaArchivos);
              if (this.photoService.photos) {
                // tslint:disable-next-line: prefer-for-of
                for (let j = 0; j < this.photoService.photos.length; j++) {
                  const element = this.photoService.photos[j];
                  const objAdjuntarImg = {
                    // tslint:disable-next-line: radix
                    UidActaAsesoria: parseInt(creacionActa[1]),
                    UidActividadMigradaXUSuario: objAdjuntarDoc.UidActividadMigradaXUSuario,
                    TipoSoporte: objAdjuntarDoc.TipoSoporte,
                    base64: element.base64Imagen
                  };
                  console.log('Objeto cuando hay fotos', objAdjuntarImg);
                  const cargarFotos = await this.advisoryTopicService.uploadFileActaAsesoria(objAdjuntarImg).toPromise();
                  console.log('Se cargaron las fotos', cargarFotos);
                }
              }
            }
          }

        }


        this.removeFile();
        this.photoService.photos = [];

        const listaActividades = await this.storage.get('listaActividades');

        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < listaActividades.length; i++) {
          const actividadesMigradas = listaActividades[i].listaActividadesMigradas;
          actividadesMigradas.forEach(element => {
            const idActividad = element.id;
            const TTA_LISTA = this.actaAsesoriaGestionada.TTA_lista;
            const encontro = TTA_LISTA.find(x => x.id === idActividad);
            if (encontro) {
              actividadesMigradas.splice(encontro, 1);
              listaActividades[i].listaActividadesMigradas = actividadesMigradas;
            }
          });
        }

        this.storage.set('listaActividades', listaActividades);
        this.notification('Atención', 'Se ha creado el acta de asesoría');
        this.router.navigateByUrl('/u/execLog');

      } else {
        this.notification('Error', 'No se pudo crear el acta de asesoría');
      }
      this.loading.dismiss();
    } else {

      const activitiesChange = [];
      const getInfoActaAsesoria = this.cacheService.getAllInfoToAdvisory();
      const actSelec = JSON.parse(sessionStorage.companySelected);
      // tslint:disable-next-line: prefer-for-of
      for (let i = 0; i < actSelec.listaActividadesMigradas.length; i++) {
        const codeActividadesMigradas = actSelec.listaActividadesMigradas[i].idActividad;
        const encontro = getInfoActaAsesoria.activities.find(element => element.idActividad === codeActividadesMigradas);
        if (encontro) {
          encontro.estadoInterno = 'Por enviar';
          activitiesChange.push(encontro);
        } else {
          activitiesChange.push(actSelec.listaActividadesMigradas[i]);
        }
      }
      actSelec.listaActividadesMigradas = activitiesChange;
      const cambioCompanySelected = JSON.stringify(actSelec);
      sessionStorage.setItem('companySelected', cambioCompanySelected);
      const saveActaAsesoria = this.cacheService.saveActasAsesoria();
      if (saveActaAsesoria) {
        this.notification('Atención', 'Se guardo el acta de asesoría pero con estado pendiente por enviar');
        this.router.navigateByUrl('/u/execLog');
      }
    }
  }

  async readFile() {
    const documentosAdjuntados = this.cacheService.saveAttach;


    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < documentosAdjuntados.length; i++) {
      const nombreArchivo = documentosAdjuntados[i].nombreArchivo;
      const idActividad = documentosAdjuntados[i].idActividad;
      const extensionBase = documentosAdjuntados[i].extensionBase64;

      // tslint:disable-next-line: prefer-const
      let contents = await Filesystem.readFile({
        path: `Android/data/co.positiva.alisstasum/files/${idActividad}/${nombreArchivo}`,
        directory: FilesystemDirectory.ExternalStorage
      }).then(data => {
        console.log('base64', data);
        const base64 = extensionBase.concat(',').concat(data.data);
        const objUploadFile = {
          UidActividadMigradaXUSuario: idActividad,
          TipoSoporte: documentosAdjuntados[i].tipoDocumento,
          Base64: base64
        };
        this.filesBase64.push(objUploadFile);
        console.log('Lista de objetos para adjuntar doc', this.filesBase64);
      });
    }

  }

  async removeFile() {
    const activities = this.cacheService.saveAttach;
    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < activities.length; i++) {
      const nombreArchivo = activities[i].nombreArchivo;
      const idActividad = activities[i].idActividad;

      // tslint:disable-next-line: prefer-const
      let contents = await Filesystem.deleteFile({
        path: `Android/data/co.positiva.alisstasum/files/${idActividad}/${nombreArchivo}`,
        directory: FilesystemDirectory.ExternalStorage
      }).then(data => {
        console.log('Eliminar archivo', data);
      });
    }
  }

  async validateNetwork() {
    const checkNetwork = await this.net.getNetworkStatus().subscribe(response => {
      this.valueNetwork = response;
      if (this.valueNetwork === false) {
        this.presentToast();
        return this.valueNetwork;
      }
    });
    return this.valueNetwork;
  }

  async presentLoading(message) {
    this.loading = await this.loadingCtlr.create({
      mode: 'ios',
      message,
    });
    return this.loading.present();
  }

  async presentToast() {
    const toast = await this.toastController.create({
      message: 'Verifique su conexión a internet.',
      duration: 2000
    });
    toast.present();
  }

  async notification(titulo, notificacion) {
    const alert = await this.alertController.create({
      header: titulo,
      backdropDismiss: false,
      mode: 'ios',
      message: notificacion,
      buttons: ['ACEPTAR']
    });

    alert.onDidDismiss();

    await alert.present();
  }



}
