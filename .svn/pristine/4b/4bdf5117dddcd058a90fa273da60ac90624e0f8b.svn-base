import { Component, OnInit, ViewChild } from '@angular/core';
import { SignaturePad } from 'angular2-signaturepad/signature-pad';
import { Storage } from '@ionic/storage';
import { NetworkService } from '../../services/network/network.service';
import { AlertController, ToastController, LoadingController } from '@ionic/angular';
import { ModalController, Platform } from '@ionic/angular';
import { AdvisoryVerificationComponent } from '../../components/advisory-verification/advisory-verification.component';
import { CacheService } from '../../services/cache/cache.service';
import { Router } from '@angular/router';
import { File } from '@ionic-native/file/ngx';
import { AdvisoryTopicService } from '../../services/activities/advisoryTopic/advisory-topic.service';
import { uploadFile } from '../../intarfaces/interfaces';
import { Plugins, FilesystemDirectory } from '@capacitor/core'
import { PhotoServiceService } from '../../services/attach/photo-service.service';
const { Filesystem } = Plugins


@Component({
  selector: 'app-responsible-signature-arl',
  templateUrl: './responsible-signature-arl.page.html',
  styleUrls: ['./responsible-signature-arl.page.scss'],
})
export class ResponsibleSignatureARLPage implements OnInit {

  private promise: Promise<string>;

  @ViewChild(SignaturePad, { static: false }) signaturePad: SignaturePad;

  // tslint:disable-next-line: ban-types
  private signaturePadOptions: Object = {
    maxWidth: 1,
    minWidth: 1,
    canvasWidth: 300,
    canvasHeight: 300
  };

  /**
   * infoUserARL, esta variable permite saber la información del usuario logeado en la aplicación
   */
  infoUserARL: any;

  /**
   * signatureEntered, Es la variable que almacena la firma ingresada por el personal de la ARL.
   */
  signatureEntered: any;

  /**
   * valueNetwork, es la variable que almacena si hay o no internet para proceder a la creación del acta.
   */
  valueNetwork: any;

  /**
   * loading, la variable para mostrar el loading al momento de enviar la información del acta.
   */
  loading: any;

  /**
   * filesBase64, es un arreglo que almacena los base64 de los archivos que han sido leidos, que almacenaron en la actividad.
   */
  filesBase64: any[] = [];

  /**
   * cargaArchivos, es solo una variable donde se almacena el resultado si es exitoso o no la carga del archivo.
   */
  cargaArchivos: any;

  /**
   * actaAsesoriaGestionada, es la variable que almacena la respuesta de la creación del acta de asesoria, por ejemplo: 'true;32'
   * el cual indica que fue creada con exito y ademas que el 32 es el número del acta de asesoría
   */
  actaAsesoriaGestionada: any;




  constructor(private storage: Storage,
              private net: NetworkService,
              private modalCtrl: ModalController,
              private photoService: PhotoServiceService,
              private file: File,
              private plt: Platform,
              private router: Router,
              private loadingCtlr: LoadingController,
              private alertController: AlertController,
              private cacheService: CacheService,
              private advisoryTopicService: AdvisoryTopicService,
              private toastController: ToastController) { }

  ngOnInit() {
    this.getInfoUser();
  }

  async ionViewWillEnter() {
    await this.readFile();
  }


  async getInfoUser() {
    this.infoUserARL = await this.storage.get('sesion');
  }

  drawComplete() {
    const firma = this.signaturePad.toDataURL().split(',');
    this.signatureEntered = firma[0].concat(',').concat(' ').concat(firma[1]);
  }

  drawStart() {
    // will be notified of szimek/signature_pad's onBegin event
    // console.log('begin drawing');
  }

  clear() {
    this.signaturePad.clear();
  }

  async verification() {
    // this.router.navigateByUrl('/u/execLog/pending-visits/visit-id/company-info/comments/survey-signature/advisoryVerification');
    const infoActa = this.cacheService.getAllInfoToAdvisory();
    const modal = await this.modalCtrl.create({
      component: AdvisoryVerificationComponent,
      componentProps: {
        info: infoActa
      }
    });

    modal.present();

  }

  validateNetwork() {
    this.net.getNetworkStatus().subscribe(response => {
      this.valueNetwork = response;
      if (this.valueNetwork === false) {
        this.presentToast();
        return this.valueNetwork;
      }
    });
    return this.valueNetwork;


  }

  async sendTask() {
    // tslint:disable-next-line: no-debugger
    debugger;
    console.log('Enviar acta de asesoria...');

    const infoSurveyResponsibleARL = {
      responsableId: this.infoUserARL.idPersona,
      responsableDocumento: this.infoUserARL.idPersona,
      responsableNombre: this.infoUserARL.nombres + ' ' + this.infoUserARL.apellidos, 
      responsableNumeroLicenciaSST: this.infoUserARL.idLicenciaSst,
      responsableCargo: this.infoUserARL.cargo,
      responsableRazonSocial: this.infoUserARL.nombreProveedor,
      responsableFirma: this.signatureEntered
    };

    this.cacheService.saveSurveyARL(infoSurveyResponsibleARL);

    const checkNetwork = this.validateNetwork();

    const idProveedor = this.infoUserARL.idProveedor;
    this.actaAsesoriaGestionada = this.cacheService.createActaAsesoria(idProveedor);
    console.log('Esta es la información del acta', this.actaAsesoriaGestionada);

    if (checkNetwork) {

      this.presentLoading();
      let creacionActa = await this.advisoryTopicService.saveActaAsesoria(this.actaAsesoriaGestionada).toPromise();
      console.log('Creacion del acta', creacionActa);
      creacionActa = creacionActa.split(';');
      if (creacionActa[0] === 'true' && creacionActa[1] !== '-1') {

        if ( this.filesBase64 || this.photoService.photos ) {
          if (this.filesBase64) {
            // tslint:disable-next-line: prefer-for-of
            for (let i = 0; i < this.filesBase64.length; i++) {
              // tslint:disable-next-line: radix
              this.filesBase64[i].UidActaAsesoria = parseInt(creacionActa[1]);
              const objAdjuntarDoc = this.filesBase64[i];
              this.cargaArchivos = await this.advisoryTopicService.uploadFileActaAsesoria(objAdjuntarDoc).toPromise();
              console.log('Se cargo el docuento', this.cargaArchivos);
              if (this.photoService.photos) {
                // tslint:disable-next-line: prefer-for-of
                for (let j = 0; j < this.photoService.photos.length; j++) {
                  const element = this.photoService.photos[j];
                  const objAdjuntarImg = {
                    // tslint:disable-next-line: radix
                    UidActaAsesoria: parseInt(creacionActa[1]),
                    UidActividadMigradaXUSuario: objAdjuntarDoc.UidActividadMigradaXUSuario,
                    TipoSoporte: objAdjuntarDoc.TipoSoporte,
                    base64: element.base64Imagen
                  };
                  console.log('Objeto cuando hay fotos', objAdjuntarImg);
                  const cargarFotos = await this.advisoryTopicService.uploadFileActaAsesoria(objAdjuntarImg).toPromise();
                  console.log('Se cargaron las fotos', cargarFotos);
                }
              }
            }
          }
        }

        this.removeFile();
        this.photoService.photos = [];

        const listaActividades = await this.storage.get('listaActividades');

        // tslint:disable-next-line: prefer-for-of
        for (let i = 0; i < listaActividades.length; i++) {
          const actividadesMigradas = listaActividades[i].listaActividadesMigradas;

          actividadesMigradas.forEach(element => {
            const idActividad = element.id;
            const TTA_LISTA = this.actaAsesoriaGestionada.TTA_lista;
            const encontro = TTA_LISTA.find(x => x.id === idActividad);
            if (encontro) {
              actividadesMigradas.splice(encontro, 1);
              listaActividades[i].listaActividadesMigradas = actividadesMigradas;
            }
          });

        }
        this.storage.set('listaActividades', listaActividades);
        this.notification('Atención', 'Se ha creado el acta de asesoría');
        this.router.navigateByUrl('/u/execLog');

      } else {
        this.notification('Error', 'Ocurrio un error y no se pudo crear el acta de asesoría');
      }

      this.loading.dismiss();

    } else {

      const activitiesChange = [];
      // const getInfoActaAsesoria = this.cacheService.getAllInfoToAdvisory();
      const getInfoActaAsesoria = this.actaAsesoriaGestionada;
      const actSelec = JSON.parse(sessionStorage.companySelected);
      // tslint:disable-next-line: prefer-for-of
      for (let i = 0; i < actSelec.listaActividadesMigradas.length; i++) {
        const codeActividadesMigradas = actSelec.listaActividadesMigradas[i].id;
        const encontro = getInfoActaAsesoria.TTA_lista.find(element => element.id === codeActividadesMigradas);
        if (encontro) {
          // encontro.estadoInterno = 'Por enviar';
          encontro.estadoInterno = 'Finalizado';
          activitiesChange.push(encontro);
        } else {
          activitiesChange.push(actSelec.listaActividadesMigradas[i]);
        }
      }
      actSelec.listaActividadesMigradas = activitiesChange;
      const cambioCompanySelected = JSON.stringify(actSelec);
      sessionStorage.setItem('companySelected', cambioCompanySelected);
      const saveActaAsesoria = this.cacheService.saveActasAsesoria();
      if (saveActaAsesoria) {
        this.notification('Atención', 'Se guardo el acta de asesoría pero con estado pendiente por enviar');
        this.router.navigateByUrl('/u/execLog');
      }
    }
  }

  async readFile() {
    const documentosAdjuntados = this.cacheService.saveAttach;
    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < documentosAdjuntados.length; i++) {
      const nombreArchivo = documentosAdjuntados[i].nombreArchivo;
      const idActividad = documentosAdjuntados[i].idActividad;
      const extensionBase = documentosAdjuntados[i].extensionBase64;
      // tslint:disable-next-line: prefer-const
      let contents = await Filesystem.readFile({
        path: `Android/data/co.positiva.alisstasum/files/${idActividad}/${nombreArchivo}`,
        directory: FilesystemDirectory.ExternalStorage
      }).then(data => {
        console.log('base64', data);
        const base64 = extensionBase.concat(',').concat(data.data);
        const objUploadFile = {
          UidActividadMigradaXUSuario: idActividad,
          TipoSoporte: documentosAdjuntados[i].tipoDocumento,
          Base64: base64
        };
        this.filesBase64.push(objUploadFile);
        console.log('Lista de objetos para adjuntar doc', this.filesBase64);
      });
    }

  }


  async removeFile() {
    const activities = this.cacheService.saveAttach;

    // tslint:disable-next-line: prefer-for-of
    for (let i = 0; i < activities.length; i++) {
      const nombreArchivo = activities[i].nombreArchivo;
      const idActividad = activities[i].idActividad;

      // tslint:disable-next-line: prefer-const
      let contents = await Filesystem.deleteFile({
        path: `Android/data/co.positiva.alisstasum/files/${idActividad}/${nombreArchivo}`,
        directory: FilesystemDirectory.ExternalStorage
      }).then(data => {
        console.log('Eliminar archivo', data);
      });
    }
  }

  async presentLoading() {
    this.loading = await this.loadingCtlr.create({
      mode: 'ios',
      message: 'Enviando...',
    });
    return this.loading.present();
  }

  async presentToast() {
    const toast = await this.toastController.create({
      message: 'Verifique su conexión a internet.',
      duration: 2000
    });
    toast.present();
  }

  async notification(titulo, notificacion) {
    const alert = await this.alertController.create({
      header: titulo,
      backdropDismiss: false,
      mode: 'ios',
      message: notificacion,
      buttons: ['ACEPTAR']
    });

    alert.onDidDismiss();

    await alert.present();
  }

}
